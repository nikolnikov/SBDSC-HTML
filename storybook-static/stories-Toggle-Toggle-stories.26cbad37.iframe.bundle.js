/*! For license information please see stories-Toggle-Toggle-stories.26cbad37.iframe.bundle.js.LICENSE.txt */
(self.webpackChunkds_consumer_html=self.webpackChunkds_consumer_html||[]).push([[996],{"./src/stories/Toggle/Toggle.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{BasicToggle:()=>BasicToggle,CheckedToggle:()=>CheckedToggle,DisabledToggle:()=>DisabledToggle,__namedExportsOrder:()=>__namedExportsOrder,default:()=>Toggle_stories});var react=__webpack_require__("./node_modules/react/index.js"),classnames=__webpack_require__("./node_modules/classnames/index.js"),classnames_default=__webpack_require__.n(classnames),prop_types=__webpack_require__("./node_modules/prop-types/index.js"),prop_types_default=__webpack_require__.n(prop_types);const QDSToggle=({isChecked,customClasses,isDisabled,inputId,label,name,onChange})=>react.createElement("div",{className:classnames_default()("ds-toggle-switch",customClasses,{"--disabled":isDisabled})},react.createElement("label",{htmlFor:inputId},react.createElement("input",{type:"checkbox",name,id:inputId,...isChecked&&{defaultChecked:!0},onChange}),react.createElement("div",{className:"--slider"})),react.createElement("span",{"aria-label":inputId},label));QDSToggle.propTypes={isChecked:prop_types_default().bool,customClasses:prop_types_default().string,isDisabled:prop_types_default().bool,inputId:prop_types_default().string.isRequired,label:prop_types_default().string,name:prop_types_default().string,onChange:prop_types_default().func};const Toggle=QDSToggle;QDSToggle.__docgenInfo={description:"",methods:[],displayName:"QDSToggle",props:{isChecked:{description:"",type:{name:"bool"},required:!1},customClasses:{description:"",type:{name:"string"},required:!1},isDisabled:{description:"",type:{name:"bool"},required:!1},inputId:{description:"",type:{name:"string"},required:!0},label:{description:"",type:{name:"string"},required:!1},name:{description:"",type:{name:"string"},required:!1},onChange:{description:"",type:{name:"func"},required:!1}}};const Toggle_QDSToggle=({customClasses,isChecked=!1,isDisabled=!1,inputId,label,name,onChange})=>react.createElement(Toggle,{customClasses:classnames_default()(customClasses),isChecked,isDisabled,inputId,label,name,onChange});Toggle_QDSToggle.propTypes={isChecked:prop_types_default().bool,customClasses:prop_types_default().string,isDisabled:prop_types_default().bool,inputId:prop_types_default().string.isRequired,label:prop_types_default().string,name:prop_types_default().string,onChange:prop_types_default().func},Toggle_QDSToggle.__docgenInfo={description:"",methods:[],displayName:"QDSToggle",props:{isChecked:{defaultValue:{value:"false",computed:!1},description:"",type:{name:"bool"},required:!1},isDisabled:{defaultValue:{value:"false",computed:!1},description:"",type:{name:"bool"},required:!1},customClasses:{description:"",type:{name:"string"},required:!1},inputId:{description:"",type:{name:"string"},required:!0},label:{description:"",type:{name:"string"},required:!1},name:{description:"",type:{name:"string"},required:!1},onChange:{description:"",type:{name:"func"},required:!1}}};const Toggle_stories={title:"Components/Toggle",component:Toggle_QDSToggle,parameters:{layout:"centered",actions:{disable:!0},interactions:{disable:!0}},tags:["autodocs","!dev"]},BasicToggle={args:{inputId:"toggle-1",label:"Label"},parameters:{docs:{source:{language:"html",type:"code",code:'\n<div class="ds-toggle-switch">\n    <label for="toggle">\n        <input type="checkbox" id="toggle" />\n        <div class="--slider"></div>\n    </label>\n    \n    <span aria-label="toggle">\n        Label\n    </span>\n</div>\n                '.trim()}}}},DisabledToggle={args:{inputId:"toggle-2",isDisabled:!0,label:"Label"},parameters:{docs:{source:{language:"html",type:"code",code:'\n<div class="ds-toggle-switch --disabled">\n    <label for="toggle">\n        <input type="checkbox" id="toggle" disabled />\n        <div class="--slider"></div>\n    </label>\n    \n    <span aria-label="toggle">\n        Label\n    </span>\n</div>\n                '.trim()}}}},CheckedToggle={args:{inputId:"toggle-3",isChecked:!0,label:"Label"},parameters:{docs:{source:{language:"html",type:"code",code:'\n<div class="ds-toggle-switch">\n    <label for="toggle">\n        <input type="checkbox" id="toggle" checked />\n        <div class="--slider"></div>\n    </label>\n    \n    <span aria-label="toggle">\n        Label\n    </span>\n</div>\n                '.trim()}}}},__namedExportsOrder=["BasicToggle","DisabledToggle","CheckedToggle"];BasicToggle.parameters={...BasicToggle.parameters,docs:{...BasicToggle.parameters?.docs,source:{originalSource:'{\n  args: {\n    inputId: \'toggle-1\',\n    label: \'Label\'\n  },\n  parameters: {\n    docs: {\n      source: {\n        language: \'html\',\n        type: \'code\',\n        code: `\n<div class="ds-toggle-switch">\n    <label for="toggle">\n        <input type="checkbox" id="toggle" />\n        <div class="--slider"></div>\n    </label>\n    \n    <span aria-label="toggle">\n        Label\n    </span>\n</div>\n                `.trim()\n      }\n    }\n  }\n}',...BasicToggle.parameters?.docs?.source}}},DisabledToggle.parameters={...DisabledToggle.parameters,docs:{...DisabledToggle.parameters?.docs,source:{originalSource:'{\n  args: {\n    inputId: \'toggle-2\',\n    isDisabled: true,\n    label: \'Label\'\n  },\n  parameters: {\n    docs: {\n      source: {\n        language: \'html\',\n        type: \'code\',\n        code: `\n<div class="ds-toggle-switch --disabled">\n    <label for="toggle">\n        <input type="checkbox" id="toggle" disabled />\n        <div class="--slider"></div>\n    </label>\n    \n    <span aria-label="toggle">\n        Label\n    </span>\n</div>\n                `.trim()\n      }\n    }\n  }\n}',...DisabledToggle.parameters?.docs?.source}}},CheckedToggle.parameters={...CheckedToggle.parameters,docs:{...CheckedToggle.parameters?.docs,source:{originalSource:'{\n  args: {\n    inputId: \'toggle-3\',\n    isChecked: true,\n    label: \'Label\'\n  },\n  parameters: {\n    docs: {\n      source: {\n        language: \'html\',\n        type: \'code\',\n        code: `\n<div class="ds-toggle-switch">\n    <label for="toggle">\n        <input type="checkbox" id="toggle" checked />\n        <div class="--slider"></div>\n    </label>\n    \n    <span aria-label="toggle">\n        Label\n    </span>\n</div>\n                `.trim()\n      }\n    }\n  }\n}',...CheckedToggle.parameters?.docs?.source}}}},"./node_modules/classnames/index.js":(module,exports)=>{var __WEBPACK_AMD_DEFINE_RESULT__;!function(){"use strict";var hasOwn={}.hasOwnProperty;function classNames(){for(var classes="",i=0;i<arguments.length;i++){var arg=arguments[i];arg&&(classes=appendClass(classes,parseValue(arg)))}return classes}function parseValue(arg){if("string"==typeof arg||"number"==typeof arg)return arg;if("object"!=typeof arg)return"";if(Array.isArray(arg))return classNames.apply(null,arg);if(arg.toString!==Object.prototype.toString&&!arg.toString.toString().includes("[native code]"))return arg.toString();var classes="";for(var key in arg)hasOwn.call(arg,key)&&arg[key]&&(classes=appendClass(classes,key));return classes}function appendClass(value,newClass){return newClass?value?value+" "+newClass:value+newClass:value}module.exports?(classNames.default=classNames,module.exports=classNames):void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(){return classNames}.apply(exports,[]))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)}()},"./node_modules/prop-types/factoryWithThrowingShims.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var ReactPropTypesSecret=__webpack_require__("./node_modules/prop-types/lib/ReactPropTypesSecret.js");function emptyFunction(){}function emptyFunctionWithReset(){}emptyFunctionWithReset.resetWarningCache=emptyFunction,module.exports=function(){function shim(props,propName,componentName,location,propFullName,secret){if(secret!==ReactPropTypesSecret){var err=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw err.name="Invariant Violation",err}}function getShim(){return shim}shim.isRequired=shim;var ReactPropTypes={array:shim,bigint:shim,bool:shim,func:shim,number:shim,object:shim,string:shim,symbol:shim,any:shim,arrayOf:getShim,element:shim,elementType:shim,instanceOf:getShim,node:shim,objectOf:getShim,oneOf:getShim,oneOfType:getShim,shape:getShim,exact:getShim,checkPropTypes:emptyFunctionWithReset,resetWarningCache:emptyFunction};return ReactPropTypes.PropTypes=ReactPropTypes,ReactPropTypes}},"./node_modules/prop-types/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{module.exports=__webpack_require__("./node_modules/prop-types/factoryWithThrowingShims.js")()},"./node_modules/prop-types/lib/ReactPropTypesSecret.js":module=>{"use strict";module.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"}}]);